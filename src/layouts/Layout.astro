---
import { config } from '../config';
import type { Website, MediaAsset, NavMenuItem, NavLinkGroup } from '../services/cms';

interface Props {
  title?: string;
  description?: string;
  websiteData?: Website | null;
  currentLocale?: string;
  image?: string;
  article?: {
    title: string;
    summary?: string;
    publishedAt?: string;
    updatedAt?: string;
    author?: { name: string };
    tags?: { name: string }[];
    slug: string;
  };
  breadcrumbs?: Array<{ name: string; url: string }>;
}

const { title, description, websiteData, currentLocale, image, article, breadcrumbs } = Astro.props as Props;
const siteName = websiteData?.header?.brandDisplayName || websiteData?.name || 'Astro Site';
const pageTitle = title ? `${title} | ${siteName}` : siteName;
const activeLocale = currentLocale || websiteData?.locale || websiteData?.defaultLocale || 'en';

function resolveAssetUrl(path?: string | null) {
  if (!path) return null;
  if (path.startsWith('http')) return path;
  if (!config.cmsUrl) {
    console.warn('Missing CMS_URL env. Returning relative asset path for logo/favicon.');
    return path;
  }
  const normalizedBase = config.cmsUrl.replace(/\/$/, '');
  return `${normalizedBase}${path}`;
}

function getAssetUrl(media?: MediaAsset | null) {
  if (!media) return null;
  return media.fullUrl || resolveAssetUrl(media.url);
}
const currentYear = new Date().getFullYear();

function createVarStyle(map: Record<string, string | undefined>, context: string): string {
  const segments: string[] = [];
  const missing: string[] = [];

  for (const [key, value] of Object.entries(map)) {
    if (!value) {
      missing.push(key);
      continue;
    }
    segments.push(`--${key}: ${value};`);
  }

  if (missing.length > 0) {
    console.warn(`Missing brand color values for ${missing.join(', ')} in ${context}. Update the CMS ${context} configuration to keep the layout in sync.`);
  }

  return segments.join(' ');
}

if (!websiteData?.theme) {
  console.warn('No theme palette found in CMS response. Layout styling will fall back to browser defaults until values are provided.');
}

const themePalette = websiteData?.theme?.palette;
const brandStyles = createVarStyle(
  {
    'brand-primary': websiteData?.theme?.brandColor || themePalette?.primary,
    'brand-secondary': themePalette?.secondary,
    'brand-background': themePalette?.background,
    'brand-text': themePalette?.neutral || themePalette?.muted,
  },
  'theme.palette'
);

const logoAsset = websiteData?.brand?.logo ?? null;
const faviconAsset = websiteData?.brand?.favicon ?? null;
const logoUrl = getAssetUrl(logoAsset);
const faviconUrl = getAssetUrl(faviconAsset) || '/favicon.svg';
const metaDescription = description ?? (websiteData?.seoDefaults?.metaDescription || 'Astro description');
const footerContent = websiteData?.footer;
const footerLinkGroups: NavLinkGroup[] = footerContent?.linkGroups ?? [];

// SEO and Social Media Variables - No hardcoded URLs!
const siteUrl = websiteData?.baseUrl || Astro.site?.toString() || `${Astro.url.protocol}//${Astro.url.host}`;
const canonicalUrl = new URL(Astro.url.pathname, siteUrl).toString();
const supportedLocales = websiteData?.supportedLocales || [activeLocale];
const defaultLocale = websiteData?.defaultLocale || activeLocale;

// Open Graph and Twitter Card image
const socialImage = image || getAssetUrl(websiteData?.brand?.logo) || `${siteUrl}/images/og-default.jpg`;

// Structured Data
const websiteStructuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": siteName,
  "url": siteUrl,
  "description": metaDescription,
  "inLanguage": activeLocale,
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${siteUrl}/${activeLocale}/search?q={search_term_string}`,
    "query-input": "required name=search_term_string"
  }
};

const breadcrumbStructuredData = breadcrumbs && breadcrumbs.length > 0 ? {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbs.map((crumb, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": crumb.name,
    "item": new URL(crumb.url, siteUrl).toString()
  }))
} : null;

const articleStructuredData = article ? {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": article.title,
  "description": article.summary || metaDescription,
  "image": socialImage,
  "datePublished": article.publishedAt,
  "dateModified": article.updatedAt || article.publishedAt,
  "author": article.author ? {
    "@type": "Person",
    "name": article.author.name
  } : undefined,
  "publisher": {
    "@type": "Organization",
    "name": siteName,
    "logo": {
      "@type": "ImageObject",
      "url": getAssetUrl(websiteData?.brand?.logo) || `${siteUrl}/images/logo.png`
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalUrl
  },
  "keywords": article.tags?.map(tag => tag.name).join(', ') || undefined
} : null;

function resolveFooterHref(item: NavMenuItem, locale: string): string {
  if (item.linkType === 'external_url') {
    return item.url || '#';
  }

  const path = item.path ? (item.path.startsWith('/') ? item.path : `/${item.path}`) : '';
  const localized = `/${locale}${path}`;
  return localized.replace(/\/+$/, '') || `/${locale}`;
}
---

<!doctype html>
<html lang={activeLocale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={metaDescription} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href={faviconUrl} />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalUrl} />

    <!-- Hreflang tags for multilingual SEO -->
    {article ? (
      // For articles, only include hreflang if the article exists in that language
      // For now, we'll be conservative and only show the current language
      <link rel="alternate" hreflang={activeLocale} href={canonicalUrl} />
    ) : (
      // For non-article pages (homepage, etc.), show all supported locales
      <>
        {supportedLocales.map(locale => {
          const hrefLangUrl = canonicalUrl.replace(`/${activeLocale}/`, `/${locale}/`).replace(`/${activeLocale}`, `/${locale}`);
          return <link rel="alternate" hreflang={locale} href={hrefLangUrl} />;
        })}
        <link rel="alternate" hreflang="x-default" href={canonicalUrl.replace(`/${activeLocale}/`, `/${defaultLocale}/`).replace(`/${activeLocale}`, `/${defaultLocale}`)} />
      </>
    )}

    <!-- Open Graph meta tags -->
    <meta property="og:type" content={article ? "article" : "website"} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content={activeLocale.replace('-', '_')} />
    <meta property="og:image" content={socialImage} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={`${siteName} - ${title || siteName}`} />

    {article && (
      <>
        <meta property="article:published_time" content={article.publishedAt} />
        <meta property="article:modified_time" content={article.updatedAt || article.publishedAt} />
        {article.author && <meta property="article:author" content={article.author.name} />}
        {article.tags && article.tags.map(tag => (
          <meta property="article:tag" content={tag.name} />
        ))}
      </>
    )}

    <!-- Twitter Card meta tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={metaDescription} />
    <meta name="twitter:image" content={socialImage} />
    <meta name="twitter:image:alt" content={`${siteName} - ${title || siteName}`} />

    <!-- Additional SEO meta tags -->
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    <meta name="language" content={activeLocale} />
    {article && article.author && <meta name="author" content={article.author.name} />}

    <!-- Performance optimizations -->
    {config.cmsUrl && (
      <>
        <link rel="preconnect" href={new URL(config.cmsUrl).origin} />
        <link rel="dns-prefetch" href={new URL(config.cmsUrl).origin} />
      </>
    )}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(websiteStructuredData)} />
    {breadcrumbStructuredData && (
      <script type="application/ld+json" set:html={JSON.stringify(breadcrumbStructuredData)} />
    )}
    {articleStructuredData && (
      <script type="application/ld+json" set:html={JSON.stringify(articleStructuredData)} />
    )}
    <style>
      :root {
        color-scheme: light;
      }
      body {
        font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        background: var(--brand-background, #f8fafc);
        color: var(--brand-text, #1f2937);
      }
      .page-main {
        flex: 1 0 auto;
      }
      .site-footer {
        background: var(--brand-primary);
        color: var(--brand-text);
        padding: 3rem 1.5rem;
      }
      .footer-inner {
        max-width: 960px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      .footer-main {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
      }
      .footer-brand {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
      }
      .footer-logo {
        height: 36px;
        width: auto;
        flex-shrink: 0;
      }
      .footer-brand-copy {
        display: flex;
        flex-direction: column;
        gap: 0.35rem;
      }
      .footer-brand-copy strong {
        font-size: 1.15rem;
        line-height: 1.1;
      }
      .footer-about {
        margin: 0;
        font-size: 0.92rem;
        color: var(--brand-text);
        opacity: 0.8;
        max-width: 540px;
      }
      .footer-links {
        display: flex;
        flex-wrap: wrap;
        gap: 2.5rem;
        justify-content: flex-start;
      }
      .footer-link-column strong {
        display: block;
        margin-bottom: 0.35rem;
        font-size: 0.95rem;
      }
      .footer-link-column ul {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
      }
      .footer-link-column a {
        color: var(--brand-text);
        opacity: 0.85;
        text-decoration: none;
        font-size: 0.85rem;
        transition: opacity 0.2s ease;
      }
      .footer-link-column a:hover {
        opacity: 1;
      }
      .footer-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        font-size: 0.85rem;
        color: var(--brand-text);
        opacity: 0.75;
        border-top: 1px solid currentColor;
        padding-top: 1.5rem;
      }
      @media (min-width: 768px) {
        .footer-main {
          flex-direction: row;
          align-items: flex-start;
          justify-content: space-between;
          gap: 2rem;
        }
        .footer-brand {
          flex: 0 1 420px;
        }
        .footer-links {
          flex: 1 1 auto;
          justify-content: flex-end;
          margin-left: auto;
        }
      }
    </style>
  </head>
  <body style={brandStyles || undefined}>
    <main class="page-main">
      <slot />
    </main>
    <footer class="site-footer">
      <div class="footer-inner">
        <div class="footer-main">
          <div class="footer-brand">
            {logoUrl && (
              <img src={logoUrl} alt={logoAsset?.alternativeText || `${siteName} logo`} class="footer-logo" loading="lazy" />
            )}
            <div class="footer-brand-copy">
              <strong>{siteName}</strong>
              {footerContent?.aboutText && (
                <div class="footer-about" set:html={footerContent.aboutText}></div>
              )}
            </div>
          </div>
          {footerLinkGroups.length > 0 && (
            <div class="footer-links">
              {footerLinkGroups.map((group) => (
                <div class="footer-link-column">
                  {group.groupTitle && <strong>{group.groupTitle}</strong>}
                  {group.links.length > 0 && (
                    <ul>
                      {group.links.map((link) => {
                        const href = resolveFooterHref(link, activeLocale);
                        const isExternal = link.linkType === 'external_url';
                        const openInNewTab = Boolean(link.openInNewTab || isExternal);
                        return (
                          <li>
                            <a
                              href={href}
                              target={openInNewTab ? '_blank' : undefined}
                              rel={openInNewTab ? 'noopener noreferrer' : undefined}
                            >
                              {link.label}
                            </a>
                          </li>
                        );
                      })}
                    </ul>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
        <div class="footer-meta">
          <span>{footerContent?.copyrightText || `© ${currentYear} ${siteName}. All rights reserved.`}</span>
        </div>
      </div>
    </footer>
  </body>
</html>
