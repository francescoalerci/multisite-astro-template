---
import Layout from '../../layouts/Layout.astro';
import DebugPanel from '../../components/DebugPanel.astro';
import NavigationBar from '../../components/NavigationBar.astro';
import HeroSection from '../../components/HeroSection.astro';
import ArticleGrid from '../../components/ArticleGrid.astro';
import NoWebsiteFallback from '../../components/NoWebsiteFallback.astro';
import { config } from '../../config';
import type { NavMenuItem } from '../../services/cms';
import { isValidLanguage, getDefaultLanguage } from '../../utils/language';
import { buildLocalizedUrl } from '../../utils/urlSegments';
import { generateStaticPaths, loadHomepage } from '../../utils/page.server';

export { generateStaticPaths as getStaticPaths } from '../../utils/page.server';

const { lang } = Astro.params;
const requestedLocale = typeof lang === 'string' ? lang : undefined;
const loadResult = await loadHomepage(requestedLocale);

if (loadResult.redirect) {
  return Astro.redirect(loadResult.redirect);
}

const {
  websiteData,
  articles,
  tags,
  supportedLocales,
  activeLocale,
} = loadResult;
const themePalette = websiteData?.theme?.palette;
const brandColor = websiteData?.theme?.brandColor ?? themePalette?.primary ?? '#FF8A00';
const secondaryColor = themePalette?.secondary ?? '#0EA5B5';
const backgroundColor = themePalette?.background ?? '#FFFFFF';
const surfaceColor = themePalette?.surface ?? '#F6F7F9';
const textColor = themePalette?.neutral ?? '#111827';
const mutedColor = themePalette?.muted ?? '#6b7280';

function resolveMediaUrl(path?: string | null): string | null {
  if (!path) return null;
  if (/^https?:\/\//i.test(path)) {
    return path;
  }
  if (!config.cmsUrl) {
    return path;
  }
  const normalizedBase = config.cmsUrl.replace(/\/$/, '');
  return `${normalizedBase}${path}`;
}

const brandDisplayName = websiteData?.header?.brandDisplayName ?? websiteData?.name ?? 'Multisite Travel';
const tagline = websiteData?.header?.tagline ?? websiteData?.seoDefaults?.metaDescription ?? '';
const heroImageSource = websiteData?.homepageHero?.image ?? null;
const heroBackgroundUrl = resolveMediaUrl(heroImageSource?.fullUrl ?? heroImageSource?.url) ?? null;
const heroImageAlt = websiteData?.homepageHero?.alt ?? brandDisplayName;
const brandLogo = websiteData?.brand?.logo ?? null;
const brandLogoUrl = resolveMediaUrl(brandLogo?.fullUrl ?? brandLogo?.url) ?? null;

const readMoreLabel = websiteData?.systemLabels?.readMoreLabel ?? 'Read more';
const searchPlaceholder = websiteData?.systemLabels?.searchPlaceholder ?? 'Search articles…';
const backToHomeLabel = websiteData?.systemLabels?.backToHomeLabel ?? 'Back to home';

const seoTitle = websiteData?.seoDefaults?.metaTitle ?? brandDisplayName;
const seoDescription = websiteData?.seoDefaults?.metaDescription ?? tagline;

// Homepage SEO image - use hero image or brand logo
const seoImage = heroBackgroundUrl || brandLogoUrl;

const sectionTitle = seoTitle;
const sectionSubtitle = seoDescription;
const summaryFallback = seoDescription || 'Full story preview coming soon. Check back shortly for the highlights.';
const primaryNav: NavMenuItem[] = websiteData?.header?.primaryNav ?? [];

function resolveNavHref(item: NavMenuItem, locale: string): string {
  if (item.linkType === 'external_url') {
    return item.url || '#';
  }

  const path = item.path ? (item.path.startsWith('/') ? item.path : `/${item.path}`) : '';
  const localized = `/${locale}${path}`;
  return localized.replace(/\/+$/, '') || `/${locale}`;
}

const navLinks = primaryNav.length > 0
  ? primaryNav.map((item) => ({
      label: item.label,
      href: resolveNavHref(item, activeLocale),
      openInNewTab: Boolean(item.openInNewTab || item.linkType === 'external_url'),
    }))
  : tags.slice(0, 5).map((tag) => ({
      label: tag.name,
      href: buildLocalizedUrl(activeLocale, ['tag', ':slug'], { slug: tag.slug }),
      openInNewTab: false,
    }));

---

<Layout title={seoTitle} description={seoDescription} websiteData={websiteData} currentLocale={activeLocale} image={seoImage}>

	<style define:vars={{
		background: backgroundColor,
		text: textColor,
		surface: surfaceColor,
		muted: mutedColor
	}}>
		.page-container {
			max-width: 1200px;
			margin: 0 auto;
			padding: 0 2rem;
			box-sizing: border-box;
		}

		.section {
			padding: 4rem 0;
		}

		.section-title {
			font-size: 2.4rem;
			font-weight: 700;
			text-align: center;
			margin-bottom: 1rem;
			color: #1f2937;
		}

		.section-subtitle {
			font-size: 1.1rem;
			color: #6b7280;
			text-align: center;
			max-width: 640px;
			margin: 0 auto 3rem;
			line-height: 1.6;
		}

		.empty-state {
			text-align: center;
			color: #6b7280;
			padding: 3rem 0;
		}

		@media (max-width: 768px) {
			.page-container {
				padding: 0 1rem;
			}
		}
	</style>

		{websiteData ? (
			<>
				<NavigationBar
					homeHref={`/${activeLocale}`}
					brandLogoUrl={brandLogoUrl}
					brandLogoAlt={brandLogo?.alternativeText || `${brandDisplayName} logo`}
					brandDisplayName={brandDisplayName}
					navLinks={navLinks}
					availableLocales={supportedLocales}
					currentLocale={activeLocale}
					currentPath={Astro.url.pathname}
					accentColor={brandColor}
				/>

				<HeroSection
					title={brandDisplayName}
					tagline={tagline}
					backgroundUrl={heroBackgroundUrl}
					primaryColor={brandColor}
					secondaryColor={secondaryColor}
					srText={heroBackgroundUrl ? heroImageAlt : undefined}
					ctaLabel={readMoreLabel}
					ctaHref="#articles"
				/>

				<div class="page-container">
					<section class="section" id="articles">
						<h2 class="section-title">{sectionTitle}</h2>
						{sectionSubtitle && (
							<p class="section-subtitle">{sectionSubtitle}</p>
						)}

						{articles.length > 0 ? (
							<ArticleGrid
								articles={articles}
								locale={activeLocale}
								readMoreLabel={readMoreLabel}
								summaryFallback={summaryFallback}
							/>
						) : (
							<div class="empty-state">
								<h3>{brandDisplayName}</h3>
								<p>{tagline || searchPlaceholder}</p>
							</div>
						)}
					</section>
				</div>
			</>
		) : (
			<NoWebsiteFallback />
		)}

	<DebugPanel
		websiteData={websiteData}
		articles={articles}
		additionalInfo={{
			"Active Locale": activeLocale,
			"Supported Locales": supportedLocales.join(', '),
			"Tags": tags.length,
			"Tag Names": tags.map(t => t.name).join(", "),
			"Hero Image": websiteData?.homepageHero?.image ? "Available" : "Not set",
			"Theme Brand Color": websiteData?.theme?.brandColor || '—',
			"System Read More": readMoreLabel
		}}
	/>
</Layout>
