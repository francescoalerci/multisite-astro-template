---
import { getLanguageInfo } from '../utils/language';

interface Props {
  availableLocales: string[];
  currentLang: string;
  currentPath?: string;
}

const { availableLocales, currentLang, currentPath = '/' } = Astro.props;

function getLanguageSwitchUrl(newLang: string, path: string): string {
  // Remove current language from path if present
  const pathSegments = path.split('/').filter(segment => segment.length > 0);

  // Remove first segment if it's a language code
  if (pathSegments.length > 0 && availableLocales.includes(pathSegments[0])) {
    pathSegments.shift();
  }

  // Build new URL with new language
  const newPath = pathSegments.length > 0 ? `/${pathSegments.join('/')}` : '';
  return `/${newLang}${newPath}`;
}
---

<div class="language-selector">
  <div class="language-dropdown">
    <button
      class="language-trigger"
      onclick="toggleLanguageDropdown()"
      aria-label="Select language"
    >
      <span class="current-language">
        {getLanguageInfo(currentLang).flag}
        <span class="language-code">{currentLang.toUpperCase()}</span>
      </span>
      <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
        <path d="M4.427 9.573l3.396-3.396a.25.25 0 01.354 0l3.396 3.396a.25.25 0 01-.177.427H4.604a.25.25 0 01-.177-.427z"/>
      </svg>
    </button>

    <div class="language-options" id="languageOptions">
      {availableLocales.map((locale) => {
        const langInfo = getLanguageInfo(locale);
        const isActive = locale === currentLang;
        const switchUrl = getLanguageSwitchUrl(locale, currentPath);

        return (
          <a
            href={switchUrl}
            class={`language-option ${isActive ? 'active' : ''}`}
            data-lang={locale}
          >
            <span class="flag">{langInfo.flag}</span>
            <span class="name">{langInfo.name}</span>
            <span class="code">{locale.toUpperCase()}</span>
          </a>
        );
      })}
    </div>
  </div>
</div>

<style>
  .language-selector {
    position: relative;
    display: inline-block;
  }

  .language-dropdown {
    position: relative;
  }

  .language-trigger {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: white;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .language-trigger:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .current-language {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    font-weight: 500;
  }

  .language-code {
    font-size: 0.75rem;
    color: #6b7280;
  }

  .language-trigger svg {
    transition: transform 0.2s ease;
    color: #9ca3af;
  }

  .language-dropdown.open .language-trigger svg {
    transform: rotate(180deg);
  }

  .language-options {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    min-width: 160px;
    background: white;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    z-index: 1000;
    margin-top: 0.25rem;
    overflow: hidden;
    opacity: 0;
    transform: translateY(-8px);
    pointer-events: none;
    transition: all 0.2s ease;
  }

  .language-dropdown.open .language-options {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }

  .language-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: #374151;
    transition: background-color 0.15s ease;
    border-bottom: 1px solid #f3f4f6;
    white-space: nowrap;
  }

  .language-option:last-child {
    border-bottom: none;
  }

  .language-option:hover {
    background: #f9fafb;
  }

  .language-option.active {
    background: #eff6ff;
    color: #1d4ed8;
    font-weight: 500;
  }

  .language-option .flag {
    font-size: 1.125rem;
    width: 20px;
    text-align: center;
    flex-shrink: 0;
  }

  .language-option .name {
    flex: 1;
    font-size: 0.875rem;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .language-option .code {
    font-size: 0.75rem;
    color: #9ca3af;
    font-weight: 500;
    flex-shrink: 0;
  }

  .language-option.active .code {
    color: #3b82f6;
  }
</style>

<script>
  window.toggleLanguageDropdown = function() {
    const dropdown = document.querySelector('.language-dropdown');
    if (dropdown) {
      dropdown.classList.toggle('open');
    }
  }

  // Close dropdown when clicking outside
  document.addEventListener('click', function(event) {
    const dropdown = document.querySelector('.language-dropdown');
    if (dropdown && !dropdown.contains(event.target)) {
      dropdown.classList.remove('open');
    }
  });
</script>